source("../shapley-utils.dml") as SPU
Forig = read("../data/KDD98/KDD98.csv", data_type="frame", format="csv", header=TRUE);

F = Forig[,1:469];
y = as.matrix(Forig[,472])

# data preparation
bin = matrix(0, ncol(F), 1);
bin[5,] = 1;
bin[8,] = 1;
bin[17,] = 1;
bin[27,] = 1;
bin[44:50,] = matrix(1, 7, 1);
bin[54,] = 1;
bin[76:195,] = matrix(1, 195-76+1, 1);
bin[199:361,] = matrix(1, 361-199+1, 1);
bin[408,] = 1;
bin[410:412,] = matrix(1, 3, 1);
bin[435:469,] = matrix(1, 469-435+1, 1);

recode="1";
for(i in 2:nrow(bin))
  if( as.scalar(bin[i,])!=1 )
    recode = recode+","+i;
binning = "{id:5, method:equi-width, numbins:10}"
for(i in 6:nrow(bin))
  if( as.scalar(bin[i,])==1 )
    binning = binning+",\n{id:"+i+", method:equi-width, numbins:10}";

jspec= "{ ids:true, recode:["+recode+"], bin:["+binning+"]}"
[X,M] = transformencode(target=F, spec=jspec);
write(M, "../data/KDD98/KDD98_binning_meta.csv", format="csv")
X = replace(target=X, pattern=NaN, replacement=0);
X = X + ((X==0) * t(bin==0)) * colMaxs(X)+1;

# run one hot encoding using transformencodes dummycode
dummycode="C1";
for(i in 2:ncol(X))
  dummycode = dummycode+",C"+i;
jspec_dummycode= "{ ids:false, dummycode:["+dummycode+"]}"

X_frame=as.frame(X)
print("Cols before dummycoding: "+ncol(X))
[X2_dummy,M_dummy] = transformencode(target=X_frame, spec=jspec_dummycode);
write(M_dummy, "../data/KDD98/KDD98_dummycoding_meta.csv", format="csv")
subsample=SPU::u_shuffle(X2_dummy)
subsample=subsample[1:20000]
write(subsample, "../data/KDD98/KDD98_X.csv", format="csv")
print("Cols after dummycoding: "+ncol(X2_dummy))



#linear regression
print("--> Training Linearregression Model")
#B = lm(X=X2_dummy, y=y, icpt=1, reg=0.0001, verbose=TRUE);
#write(B, "../data/KDD98/KDD98_lm_weights.csv", format="csv")
B = read("../data/KDD98/KDD98_lm_weights.csv")

#testing model
print("-> Testing LM")
P = lmPredict(X=X2_dummy, B=B, ytest=y, icpt=1, verbose=TRUE)

print("Done.")

